import os
import requests
import time
import sys
import shutil
import threading
import tkinter as tk
import psutil
import pymem

# ЁЯФ╣ ржЖржкржбрзЗржЯ рж▓рж┐ржЩрзНржХ ржПржмржВ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо
UPDATE_URL = "https://github.com/nobita695683/python-update-/raw/refs/heads/main/update.py"  # ЁЯСИ ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ GitHub рж▓рж┐ржЩрзНржХ ржжрж┐ржи
LOCAL_SCRIPT = "main.py"
EXE_NAME = "main.exe"
TEMP_EXE_NAME = "main_main.exe"

def update_script():
    """ржЧрж┐ржЯрж╣рж╛ржм ржерзЗржХрзЗ ржирждрзБржи ржХрзЛржб ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржЖржкржбрзЗржЯ ржХрж░рзЗ"""
    label.config(text="ЁЯФД ржХрзЛржб ржЖржкржбрзЗржЯ рж╣ржЪрзНржЫрзЗ... ржжржпрж╝рж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
    try:
        response = requests.get(UPDATE_URL)
        if response.status_code == 200:
            with open(LOCAL_SCRIPT, "w", encoding="utf-8") as file:
                file.write(response.text)
            label.config(text="тЬЕ ржХрзЛржб ржЖржкржбрзЗржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ!")
            return True
        else:
            label.config(text="тЭМ ржХрзЛржб ржЖржкржбрзЗржЯ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ!")
            return False
    except Exception as e:
        label.config(text=f"тЪая╕П рждрзНрж░рзБржЯрж┐: {e}")
        return False

def rebuild_exe():
    """PyInstaller ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ EXE ржлрж╛ржЗрж▓ ржкрзБржирж░рж╛ржпрж╝ рждрзИрж░рж┐ ржХрж░рзЗ"""
    label.config(text="ЁЯФД EXE ржкрзБржирж░рж╛ржпрж╝ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ... ржжржпрж╝рж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
    try:
        os.system(f'pyinstaller --onefile --noconsole {LOCAL_SCRIPT}')
        if os.path.exists(f"dist/{EXE_NAME}"):
            shutil.move(f"dist/{EXE_NAME}", TEMP_EXE_NAME)
            label.config(text="тЬЕ EXE рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ!")
            return True
        else:
            label.config(text="тЭМ EXE рждрзИрж░рж┐ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ!")
            return False
    except Exception as e:
        label.config(text=f"тЪая╕П рждрзНрж░рзБржЯрж┐: {e}")
        return False

def restart_exe():
    """ржирждрзБржи EXE ржлрж╛ржЗрж▓ ржЪрж╛рж▓рзБ ржХрж░рзЗ ржПржмржВ ржкрзБрж░рж╛ржирзЛржЯрж┐ ржмржирзНржз ржХрж░рзЗ"""
    label.config(text="ЁЯЪА рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржкрзБржирж░рж╛ржпрж╝ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    time.sleep(2)
    os.replace(TEMP_EXE_NAME, EXE_NAME)  # ржкрзБрж░рж╛ржирзЛ EXE ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ ржирждрзБржи EXE рж░рж╛ржЦрзЗ
    os.system(EXE_NAME)
    sys.exit()

def run_code_update():
    """рж╢рзБржзрзБржорж╛рждрзНрж░ ржХрзЛржб ржЖржкржбрзЗржЯ ржХрж░ржмрзЗ (EXE рждрзИрж░рж┐ ржХрж░ржмрзЗ ржирж╛)"""
    threading.Thread(target=update_script, daemon=True).start()

def run_exe_update():
    """рж╢рзБржзрзБржорж╛рждрзНрж░ EXE ржЖржкржбрзЗржЯ ржХрж░ржмрзЗ (ржХрзЛржб ржЖржкржбрзЗржЯ ржХрж░ржмрзЗ ржирж╛)"""
    def process():
        if rebuild_exe():
            restart_exe()
    
    threading.Thread(target=process, daemon=True).start()

# ЁЯФ╣ Tkinter UI рждрзИрж░рж┐ ржХрж░рзБржи
root = tk.Tk()
root.title("рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржЖржкржбрзЗржЯрж╛рж░")
root.geometry("400x300")

label_status = ctk.CTkLabel(root, text="тШв", text_color="white")
label_status.pack(side="bottom", anchor="sw", padx=10, pady=0.5)
# ЁЯП╖я╕П рж▓рзЗржмрзЗрж▓ ржЙржЗржЬрзЗржЯ
label = tk.Label(root, text="ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо!", font=("Arial", 14))
label.pack(pady=20)

# ЁЯЯв ржХрзЛржб ржЖржкржбрзЗржЯ ржмрж╛ржЯржи (рж╢рзБржзрзБржорж╛рждрзНрж░ ржХрзЛржб ржЖржкржбрзЗржЯ ржХрж░ржмрзЗ)
code_update_button = tk.Button(root, text="ЁЯУЭ ржХрзЛржб ржЖржкржбрзЗржЯ ржХрж░рзБржи", command=run_code_update)
code_update_button.pack(pady=10)

# ЁЯФ╡ EXE ржЖржкржбрзЗржЯ ржмрж╛ржЯржи (рж╢рзБржзрзБржорж╛рждрзНрж░ EXE ржЖржкржбрзЗржЯ ржУ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░ржмрзЗ)
exe_update_button = tk.Button(root, text="тЪЩя╕П EXE ржЖржкржбрзЗржЯ ржХрж░рзБржи", command=run_exe_update)
exe_update_button.pack(pady=10)

emulator_bypass_checkbox_var = ctk.BooleanVar()
emulator_bypass_checkbox = ctk.CTkCheckBox(root, text="100 Level", variable=emulator_bypass_checkbox_var, command=emote_100)
emulator_bypass_checkbox.place(relx=0.1, rely=0.4)  # ржбрж╛ржи ржкрж╛рж╢рзЗ
def emote_100():
    search = rb"\x41\x3D\x2E\x36"
    replace = b"\x57\xE1\x2E\x36"

     # Check if HD-Player.exe is running
    hd_player_running = False
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] == 'HD-Player.exe':
            hd_player_running = True
            break

    if not hd_player_running:
        label_status.configure(text="No Found HD-Player.exe", text_color="red")
        return

    # Memory Patch Apply
    status = Memory.scan_and_replace("HD-Player.exe", search, replace)

    if status:
        label_status.configure(text="100 Level Enabled!", text_color="green")
    else:
        label_status.configure(text="100 Level Failed!", text_color="red")

    # Play beep sound after scan process is complete




def scan_and_replace(processName, search, replace):
    try:
        pm = pymem.Pymem(processName)
        matches = pm.pattern_scan_all(search, return_multiple=True)

        if not matches:
            return False
        
        if len(matches) == 1:
            print("One value found")
        else:
            print(f"Warning: multiple values found ({len(matches)})!")

        for match in matches:
            pm.write_bytes(match, replace, len(replace))

        return True

    except Exception as e:
        print(f"Error: {e}")
        return False

def get_process(procesName):
    try:
        pm = pymem.Pymem(procesName)
        print('Process Found Please Continue')
        return pm.process_id
    except:
        print('Process Not Found Waiting for process')
        return False





























# тЦ╢я╕П Tkinter ржорзЗржЗржи рж▓рзБржк ржЪрж╛рж▓рзБ ржХрж░рзБржи
root.mainloop()
